version: "3.8"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR:

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENER_HTTP_PORT: 8081
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    ports:
      - "8082:8082"

  mongo_db:
    image: mongo:5.0.2
    ports:
      - 27017:27017
#    volumes:
#      - db:/data/db

  postgresdb:
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=postgres-db
    ports:
      - 5433:5432
    volumes:
      - db:/var/lib/postgres

  approval-service:
    depends_on:
      - mongo_db
    build: ./approval-service
    restart: on-failure
    ports:
      - "8088:8088"
    environment:
      SPRING_APPLICATION_JSON: '{
          "spring.data.mongodb.uri" : "mongodb://mongo_db:27017/approvalservice"
        }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  booking-service:
    depends_on:
      - mongo_db
      - kafka
    build:
      context: ./booking-service
    container_name: booking-service
    restart: on-failure
    ports:
      - 8087:8087
    environment:
      SPRING_APPLICATION_JSON: '{
          "spring.data.mongodb.uri" : "mongodb://mongo_db:27017/bookingservice",
                                "spring.kafka.bootstrap-servers": "kafka:9092"
        }'
#    volumes:
#      - .m2:/root/.m2
    stdin_open: true
    tty: true


  event-service:
    depends_on:
      - mongo_db
      - kafka
    build: ./event-service
    restart: on-failure
    ports:
      - "8085:8085"
    environment:
      SPRING_APPLICATION_JSON: '{
          "spring.data.mongodb.uri" : "mongodb://mongo_db:27017/eventservice",
          "spring.kafka.bootstrap-servers": "kafka:9092"
        }'

    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  user-service:
    depends_on:
      - postgresdb
    build: ./user-service
    restart: on-failure
    ports:
      - "8084:8084"
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:postgresql://postgresdb:5432/postgres-db",
        "spring.datasource.username" : "postgres",
        "spring.datasource.password" : "123456",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "update",
        "spring.flyway.baseline-on-migrate" : "true"
      }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  room-service:
    depends_on:
      - postgresdb
    build: ./room-service
    restart: on-failure
    ports:
      - "8083:8083"
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:postgresql://postgresdb:5432/postgres-db",
        "spring.datasource.username" : "postgres",
        "spring.datasource.password" : "123456",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "update",
        "spring.flyway.baseline-on-migrate" : "true"
      }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  gateway-service:
    build: ./gateway-application
    restart: on-failure
    depends_on:
      - user-service
      - event-service
      - approval-service
      - booking-service
      - room-service
    ports:
      - "8081:8081"
    stdin_open: true
    tty: true
    environment:
      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: http://user-service:8084
      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: user-service
      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path= /api/users/**
      SPRING_CLOUD_GATEWAY_ROUTES[1]_URI: http://approval-service:8088
      SPRING_CLOUD_GATEWAY_ROUTES[1]_ID: approval-service
      SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[1]: Path= /api/approvals/**
      SPRING_CLOUD_GATEWAY_ROUTES[2]_URI: http://room-service:8083
      SPRING_CLOUD_GATEWAY_ROUTES[2]_ID: room-service
      SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[2]: Path= /api/room/**
      SPRING_CLOUD_GATEWAY_ROUTES[3]_URI: http://event-service:8085
      SPRING_CLOUD_GATEWAY_ROUTES[3]_ID: event-service
      SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[3]: Path= /api/events/**
      SPRING_CLOUD_GATEWAY_ROUTES[4]_URI: http://booking-service:8087
      SPRING_CLOUD_GATEWAY_ROUTES[4]_ID: booking-service
      SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[4]: Path= /api/bookings/**




  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    #    volumes:
    #      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    #      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3001:3000"
    depends_on:
      - prometheus


#  loki:
#    image: grafana/loki:latest
#    ports:
#      - "3100:3100"
#    command: -config.file=/etc/loki/local-config.yaml
#    networks:
#      - loki
#
#  promtail:
#    image: grafana/promtail:latest
#    volumes:
#      - /var/log:/var/log
#    command: -config.file=/etc/promtail/config.yml
#    networks:
#      - loki


volumes:
  db:

